package dsms.client.corba.DSMSApp;


import org.omg.CORBA.MARSHAL;
import org.omg.CORBA.ORB;
import org.omg.CORBA.portable.*;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Properties;

/**
 * dsms/client/corba/DSMSApp/_DSMSStub.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from dsms/client/corba/DSMS.idl
 * Tuesday, August 9, 2016 2:17:05 AM EDT
 */

public class _DSMSStub extends ObjectImpl implements DSMS {

    public void createDrecord(String MID, String id, String FirstName, String LastName, String PhoneNumber, String Address, String Specialization, String Location) {
        InputStream $in = null;
        try {
            OutputStream $out = _request("createDrecord", true);
            $out.write_string(MID);
            $out.write_string(id);
            $out.write_string(FirstName);
            $out.write_string(LastName);
            $out.write_string(PhoneNumber);
            $out.write_string(Address);
            $out.write_string(Specialization);
            $out.write_string(Location);
            $in = _invoke($out);
            return;
        } catch (ApplicationException $ex) {
            $in = $ex.getInputStream();
            String _id = $ex.getId();
            throw new MARSHAL(_id);
        } catch (RemarshalException $rm) {
            createDrecord(MID, id, FirstName, LastName, PhoneNumber, Address, Specialization, Location);
        } finally {
            _releaseReply($in);
        }
    } // createDrecord

    public void createNrecord(String MID, String id, String firstName, String lastName, String designation, String status, String statusDate) {
        InputStream $in = null;
        try {
            OutputStream $out = _request("createNrecord", true);
            $out.write_string(MID);
            $out.write_string(id);
            $out.write_string(firstName);
            $out.write_string(lastName);
            $out.write_string(designation);
            $out.write_string(status);
            $out.write_string(statusDate);
            $in = _invoke($out);
            return;
        } catch (ApplicationException $ex) {
            $in = $ex.getInputStream();
            String _id = $ex.getId();
            throw new MARSHAL(_id);
        } catch (RemarshalException $rm) {
            createNrecord(MID, id, firstName, lastName, designation, status, statusDate);
        } finally {
            _releaseReply($in);
        }
    } // createNrecord

    public void EditData(String MID, String id, String fieldName, String newValue) {
        InputStream $in = null;
        try {
            OutputStream $out = _request("EditData", true);
            $out.write_string(MID);
            $out.write_string(id);
            $out.write_string(fieldName);
            $out.write_string(newValue);
            $in = _invoke($out);
            return;
        } catch (ApplicationException $ex) {
            $in = $ex.getInputStream();
            String _id = $ex.getId();
            throw new MARSHAL(_id);
        } catch (RemarshalException $rm) {
            EditData(MID, id, fieldName, newValue);
        } finally {
            _releaseReply($in);
        }
    } // EditData

    public void transferRecord(String managerID, String recordID, String remoteClinicServerName) {
        InputStream $in = null;
        try {
            OutputStream $out = _request("transferRecord", true);
            $out.write_string(managerID);
            $out.write_string(recordID);
            $out.write_string(remoteClinicServerName);
            $in = _invoke($out);
            return;
        } catch (ApplicationException $ex) {
            $in = $ex.getInputStream();
            String _id = $ex.getId();
            throw new MARSHAL(_id);
        } catch (RemarshalException $rm) {
            transferRecord(managerID, recordID, remoteClinicServerName);
        } finally {
            _releaseReply($in);
        }
    } // transferRecord

    public void getRecordCount(String managerID) {
        InputStream $in = null;
        try {
            OutputStream $out = _request("getRecordCount", true);
            $out.write_string(managerID);
            $in = _invoke($out);
            return;
        } catch (ApplicationException $ex) {
            $in = $ex.getInputStream();
            String _id = $ex.getId();
            throw new MARSHAL(_id);
        } catch (RemarshalException $rm) {
            getRecordCount(managerID);
        } finally {
            _releaseReply($in);
        }
    } // getRecordCount

    // Type-specific CORBA::Object operations
    private static String[] __ids = {
            "IDL:DSMSApp/DSMS:1.0"};

    public String[] _ids() {
        return (String[]) __ids.clone();
    }

    private void readObject(ObjectInputStream s) throws IOException {
        String str = s.readUTF();
        String[] args = null;
        Properties props = null;
        ORB orb = ORB.init(args, props);
        try {
            org.omg.CORBA.Object obj = orb.string_to_object(str);
            Delegate delegate = ((ObjectImpl) obj)._get_delegate();
            _set_delegate(delegate);
        } finally {
            orb.destroy();
        }
    }

    private void writeObject(ObjectOutputStream s) throws IOException {
        String[] args = null;
        Properties props = null;
        ORB orb = ORB.init(args, props);
        try {
            String str = orb.object_to_string(this);
            s.writeUTF(str);
        } finally {
            orb.destroy();
        }
    }
} // class _DSMSStub
